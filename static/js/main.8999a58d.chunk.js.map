{"version":3,"sources":["serviceWorker.js","Components/ErrorProtect.js","Containers/quotes.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorProtect","props","state","hasError","this","setState","id","className","children","React","Component","RandomQuotes","getNumber","finalNumber","num","storage","quotes","checkFunction","console","log","random","author","firstTime","generateRandomQuote","bind","valueForRandom","Math","floor","randomQuote","quote","authorOfQuotes","fetch","then","response","json","href","onClick","intialQuotelength","length","intialFunctionForQuote","intialFunctionForQuote1","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCUSC,E,YAzBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAACC,UAAU,GAFV,E,iFAMdC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAGC,KAAKF,MAAMC,SACF,yBAAKG,GAAG,aACZ,wBAAIA,GAAG,QAAP,iDACA,yBAAKC,UAAU,OACX,gCAAQ,uBAAGD,GAAG,eAAN,YACR,4BAAQA,GAAG,SAAX,aACA,4BAAQA,GAAG,aAAX,gBAKHF,KAAKH,MAAMO,a,GAtBDC,IAAMC,WC6FlBC,G,kBA1FX,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KAUVW,UAAY,WACR,IAAIC,EAAc,EAClB,IAAI,IAAIC,KAAO,EAAKZ,MAAMa,QAAQC,OAC9BH,EAAcC,EAElB,OAAOD,GAhBO,EA+BlBI,cAAgB,WACZC,QAAQC,IAAI,SA9BZ,EAAKjB,MAAQ,CACTkB,OAAQ,GACRC,OAAQ,GACRN,QAAS,GACTO,WAAW,GAEf,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBARb,E,mFAoBd,IAAMC,EAAiBrB,KAAKQ,YACtBQ,EAASM,KAAKC,MAAMD,KAAKN,SAAUK,GACnCG,EAAcxB,KAAKF,MAAMa,QAAQC,OAAOI,GAAQS,MAChDC,EAAiB1B,KAAKF,MAAMa,QAAQC,OAAOI,GAAQC,OACzDjB,KAAKC,SAAS,CACVe,OAAQQ,EACRP,OAAQS,EACRR,WAAW,M,0CAOC,IAAD,OAGfS,MAAM,0IACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAM,OAAI,EAAKX,SAAS,CAACU,QAASC,S,+BAGnC,IAAD,OACJ,GAAiC,kBAAvBZ,KAAKF,MAAMa,QAClB,OACC,yBAAKT,GAAG,aACL,wBAAIA,GAAG,QAAP,iBACA,yBAAKC,UAAU,OACX,gCAAQ,uBAAGD,GAAG,cAAc6B,KAAK,4BAAzB,YACR,4BAAQ7B,GAAG,SAAX,aACA,4BAAQA,GAAG,YAAY8B,QAAShC,KAAKmB,qBAArC,gBAoBP,OACC,kBAAC,EAAD,KACE,yBAAKjB,GAAG,aACN,wBAAIA,GAAG,QAAP,IAAgBF,KAAKF,MAAMoB,UAjBD,WAC3B,IAAMe,EAAoB,EAAKnC,MAAMa,QAAQC,OAAOsB,OAC9ClB,EAASM,KAAKC,MAAMD,KAAKN,SAAUiB,GAEzC,OADoB,EAAKnC,MAAMa,QAAQC,OAAOI,GAAQS,MAcfU,GAA0BnC,KAAKF,MAAMkB,OAA3E,KACA,uBAAGd,GAAG,UAAN,KAAkBF,KAAKF,MAAMoB,UAXF,WAC5B,IAAMe,EAAoB,EAAKnC,MAAMa,QAAQC,OAAOsB,OAC9ClB,EAASM,KAAKC,MAAMD,KAAKN,SAAUiB,GAEzC,OADuB,EAAKnC,MAAMa,QAAQC,OAAOI,GAAQC,OAQjBmB,GAA2BpC,KAAKF,MAAMmB,QAC7E,yBAAKd,UAAU,OACX,gCAAQ,uBAAGD,GAAG,cAAc6B,KAAK,4BAAzB,YACR,4BAAQ7B,GAAG,SAAX,aACA,4BAAQA,GAAG,YAAY8B,QAAShC,KAAKmB,qBAArC,qB,GA/EMd,IAAMC,YCCjC+B,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SH8H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.8999a58d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nclass ErrorProtect extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {hasError: false}\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return (<div id=\"quote-box\">\r\n                <h1 id=\"text\">Make Sure you have Proper internet connection</h1>\r\n                <div className=\"btn\">\r\n                    <button><a id=\"tweet-quote\">Twitter</a></button>\r\n                    <button id=\"insta\">Instagram</button>\r\n                    <button id=\"new-quote\">Next Quote</button>\r\n                </div>\r\n                    \r\n             </div>)\r\n        }\r\n          return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorProtect;","import React from 'react';\r\nimport ErrorProtect from '../Components/ErrorProtect';\r\nimport '../Containers/quote.css'\r\n\r\nclass RandomQuotes extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            random: '',\r\n            author: '',\r\n            storage: '',\r\n            firstTime: true\r\n        }\r\n        this.generateRandomQuote = this.generateRandomQuote.bind(this);\r\n    }\r\n\r\n    getNumber = () => {\r\n        let finalNumber = 0;\r\n        for(let num in this.state.storage.quotes){\r\n            finalNumber = num\r\n        }\r\n        return finalNumber;\r\n    }\r\n\r\n    generateRandomQuote(){\r\n        const valueForRandom = this.getNumber();\r\n        const random = Math.floor(Math.random()* valueForRandom);\r\n        const randomQuote = this.state.storage.quotes[random].quote;\r\n        const authorOfQuotes = this.state.storage.quotes[random].author;\r\n        this.setState({\r\n            random: randomQuote,\r\n            author: authorOfQuotes,\r\n            firstTime: false\r\n        })\r\n    }\r\n\r\n    checkFunction = () => {\r\n        console.log('work');\r\n    }\r\n    componentDidMount(){\r\n        // https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json ---------------- This URL is taken from FreeCodeCamp project\r\n\r\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n        .then(response => response.json())\r\n        .then(quotes => this.setState({storage: quotes})); \r\n    }\r\n\r\n    render(){\r\n        if(typeof this.state.storage === 'string'){\r\n           return (\r\n            <div id=\"quote-box\">\r\n               <h1 id=\"text\">Please wait..</h1>\r\n               <div className=\"btn\">\r\n                   <button><a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">Twitter</a></button>\r\n                   <button id=\"insta\">Instagram</button>\r\n                   <button id=\"new-quote\" onClick={this.generateRandomQuote}>Next Quote</button>\r\n               </div>\r\n                   \r\n            </div>   \r\n           )\r\n        }else{\r\n            const intialFunctionForQuote = () => {\r\n                const intialQuotelength = this.state.storage.quotes.length;\r\n                const random = Math.floor(Math.random()* intialQuotelength);\r\n                const randomQuote = this.state.storage.quotes[random].quote;\r\n                return randomQuote;\r\n            }\r\n\r\n            const intialFunctionForQuote1 = () => {\r\n                const intialQuotelength = this.state.storage.quotes.length;\r\n                const random = Math.floor(Math.random()* intialQuotelength);\r\n                const authorOfQuotes = this.state.storage.quotes[random].author;\r\n                return authorOfQuotes;\r\n            }\r\n            \r\n            return(\r\n             <ErrorProtect>\r\n               <div id=\"quote-box\">\r\n                 <h1 id=\"text\">\"{this.state.firstTime? intialFunctionForQuote(): this.state.random}\"</h1>\r\n                 <p id=\"author\">--{this.state.firstTime?intialFunctionForQuote1(): this.state.author}</p>\r\n                 <div className=\"btn\">\r\n                     <button><a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">Twitter</a></button>\r\n                     <button id=\"insta\">Instagram</button>\r\n                     <button id=\"new-quote\" onClick={this.generateRandomQuote}>Next Quote</button>\r\n                 </div>\r\n                    \r\n                </div> \r\n             </ErrorProtect>   \r\n              \r\n          )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default RandomQuotes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Quotes from './Containers/quotes';\n\nReactDOM.render(<Quotes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}